{"ast":null,"code":"import { CART_ADD_ITEM, CART_REMOVE_ITEM } from '../constants/cartConstants';\nexport const cartReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    cartItems: []\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      const existItem = state.cartItems.find(x => x.product === item.product);\n\n      if (existItem) {\n        return { ...state,\n          cartItems: state.cartItems.map(x => x.product === existItem.product ? item : x)\n        };\n      } else {\n        return { ...state,\n          cartItems: [...state.cartItems, item]\n        };\n      }\n\n    default:\n      state;\n  }\n};","map":{"version":3,"sources":["/Users/bhavesh/Desktop/mern Project/frontend/src/reducers/cartReducers.js"],"names":["CART_ADD_ITEM","CART_REMOVE_ITEM","cartReducer","state","cartItems","action","type","item","payload","existItem","find","x","product","map"],"mappings":"AAAA,SAAQA,aAAR,EAAsBC,gBAAtB,QAA8C,4BAA9C;AAEA,OAAO,MAAMC,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAxB;AAACC,IAAAA,SAAS,EAAC;AAAX,GAAwB;AAAA,MAATC,MAAS;;AACtD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKN,aAAL;AACI,YAAMO,IAAI,GAAGF,MAAM,CAACG,OAApB;AACA,YAAMC,SAAS,GAAIN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA7C,CAAnB;;AACA,UAAGH,SAAH,EAAa;AACT,eAAO,EACH,GAAGN,KADA;AAEHC,UAAAA,SAAS,EAACD,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAqBF,CAAD,IAC1BA,CAAC,CAACC,OAAF,KAAcH,SAAS,CAACG,OAAxB,GAAmCL,IAAnC,GAA0CI,CADpC;AAFP,SAAP;AAMH,OAPD,MAOK;AACD,eAAO,EACH,GAAGR,KADA;AAEHC,UAAAA,SAAS,EAAC,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAoBG,IAApB;AAFP,SAAP;AAIH;;AACL;AAASJ,MAAAA,KAAK;AAjBlB;AAmBH,CApBM","sourcesContent":["import {CART_ADD_ITEM,CART_REMOVE_ITEM} from  '../constants/cartConstants'\n\nexport const cartReducer = (state={cartItems:[]},action)=>{\n    switch(action.type){\n        case CART_ADD_ITEM :\n            const item = action.payload;\n            const existItem =  state.cartItems.find(x => x.product === item.product);\n            if(existItem){\n                return {\n                    ...state,\n                    cartItems:state.cartItems.map((x)=>\n                        x.product === existItem.product  ? item : x\n                    )\n                }\n            }else{\n                return {\n                    ...state,\n                    cartItems:[...state.cartItems,item]\n                }\n            }\n        default: state\n    }\n}"]},"metadata":{},"sourceType":"module"}